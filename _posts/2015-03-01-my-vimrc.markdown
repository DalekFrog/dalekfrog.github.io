---
layout: post
title: My vimrc file
date: 2015-03-01 22:52:43
tags: vim code
---

把我的vimrc文件放上来，方便备份。

	" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
	" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
	" you can find below.  If you wish to change any of those settings, you should
	" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
	" everytime an upgrade of the vim packages is performed.  It is recommended to
	" make changes after sourcing debian.vim since it alters the value of the
	" 'compatible' option.
	
	" This line should not be removed as it ensures that various options are
	" properly set to work with the Vim-related packages available in Debian.
	runtime! debian.vim
	
	" Uncomment the next line to make Vim more Vi-compatible
	" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
	" options, so any other options should be set AFTER setting 'compatible'.
	"set compatible
	
	" Vim5 and later versions support syntax highlighting. Uncommenting the next
	" line enables syntax highlighting by default.
	syntax enable
	syntax on
	
	" If using a dark background within the editing area and syntax highlighting
	" turn on this option as well
	"set background=dark
	
	" Uncomment the following to have Vim jump to the last position when
	" reopening a file
	"if has("autocmd")
	"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
	"endif
	
	" Uncomment the following to have Vim load indentation rules and plugins
	" according to the detected filetype.
	"if has("autocmd")
	"  filetype plugin indent on
	"endif
	
	" Source a global configuration file if available
	if filereadable("/etc/vim/vimrc.local")
	source /etc/vim/vimrc.local
	endif
	" The following are commented out as they cause vim to behave a lot
	" differently from regular Vi. They are highly recommended though.
	set showcmd		" Show (partial) command in status line.
	set showmatch		" Show matching brackets.
	set ignorecase		" Do case insensitive matching
	"set smartcase		" Do smart case matching
	"set incsearch		" Incremental search
	set autowrite		" Automatically save before commands like :next and :make
	"set hidden             " Hide buffers when they are abandoned
	"set mouse=a		" Enable mouse usage (all modes)
	
	
	set nu 
	set fileencodings=utf-8,gb18030,utf-16,big5
	"set encoding=utf8
	set termencoding=utf8
	set ffs=unix,dos,mac  
	set cursorline " 突出显示当前行
	set ruler " 打开状态栏标尺
	"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")} "状态行显示的内容
	set laststatus=2 " 启动显示状态行(1),总是显示状态行(2) 
	set hlsearch " 搜索时高亮显示被找到的文本
	set smartindent " 开启新行时使用智能自动缩进
	set completeopt=preview,menu  "代码补全
	set autoread
	"set go=
	"set background=dark
	set foldmethod=syntax
	set t_Co=256 " Explicitly tell Vim that the terminal supports 256 colors
	set ttimeoutlen=50
	
	
	"python 自动补全
	filetype plugin on  
	autocmd FileType python set omnifunc=pythoncomplete#Complete 
	"python 自动补全
	
	
	
	"设置C/C++方式自动对齐
	set autoindent
	set cindent
	
	autocmd BufNewFile,BufReadPost *.md set filetype=markdown
	
	
	""""""""""""
	autocmd BufReadPost *
	\ if line("''\"") > 0 && line("'\"") <= line("$") |
	\ 	exe "normal g'\"" |
	\endif
	
	
	"""""""""""""""""""""""""
	"Map
	"""""""""""""""""""""""""
	map <F12> gg=G
	
	
	
	
	
	
	"""""""""""""""""""""""""""""""""""""
	"Vundle plugin
	"""""""""""""""""""""""""""""""""""""
	
	set nocompatible              " be iMproved
	filetype off                  " required!
	if !isdirectory(expand("~/.vim/bundle/Vundle.vim/.git"))
	!git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
	endif
	
	set rtp+=~/.vim/bundle/Vundle.vim/
		"call vundle#rc()
	call vundle#begin()
		" let Vundle manage Vundle
		" " required! 
		Plugin 'gmarik/Vundle.vim'
		"
		" " My Plugins here:
		" "" ubuntu 系列先 apt-get install exuberant-ctags
		"Plugin 'ctags'
		Plugin 'The-NERD-tree'
		Plugin 'taglist-plus'   
		Plugin 'winmanager'
		Plugin 'python.vim--Vasiliev'
		Plugin 'xml.vim'
		Plugin 'fcitx.vim'
		Plugin 'L9'
		Plugin 'FuzzyFinder'
		Plugin 'python-imports.vim'
		Plugin 'rails.vim'
		Plugin 'vim-latex/vim-latex'
		Plugin 'bling/vim-airline'
		"Plugin 'Lokaltog/vim-powerline'
		"Plugin 'Markdown-syntax'
		"Plugin 'linepower.vim'
		"Plugin 'latex'
		"
	call vundle#end() 
		filetype plugin indent on     " required!
		"
		" Brief help
		" :PluginList          - list configured Plugins
		" :PluginInstall(!)    - install (update) Plugins
		" :PluginSearch(!) foo - search (or refresh cache first) for foo
		" :PluginClean(!)      - confirm (or auto-approve) removal of unused Plugins
		"
		" see :h vundle for more details or wiki for FAQ
		" NOTE: comments after Plugin commands are not allowed.
	
	
	
		""""""""""""""""""""""""""""""
		" WinManager Config 
		" """"""""""""""""""""""""""""""
	
		let g:winManagerWindowLayout='FileExplorer|TagList'
	
		nmap wm :WMToggle<cr>
		map <silent> <F3> :WMToggle<cr>
	
	
		""""""""""""""""""""""""""""""""""
		" NERDTree
		""""""""""""""""""""""""""""""""""
		map <silent> <F4> :NERDTreeToggle<cr>
		let NERDTreeShowHidden=1   "show hiden file
		let NERDChristmasTree=1
		let NERDTreeSortOrder=['\/$', '\.rb$', '\.php$', '*', '\.swp$',  '\.bak$', '\~$']
		let NERDTreeShowBookmarks=1 "自动显示bookmark 
		"autocmd vimenter * NERDTree  " 打开vim时自动打开NERDTree
		autocmd vimenter * if !argc() | NERDTree | endif "当打开vim且没有文件时自动打开NERDTree
		autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif "最后只剩NERDTree时自动退出
		let NERDTreeWinSize=28
	
	
		"""""""""""""""""""""""""""""""
		"TagList
		""""""""""""""""""""""""""""""
		map <silent> <F5> :TlistToggle<cr>
		let Tlist_Show_One_File=1 " 不同时显示多个文件的 tag ，只显示当前文件的
		let Tlist_Exit_OnlyWindow=1 " 如果 taglist 窗口是最后一个窗口，则退出 vim
		let Tlist_File_Fold_Auto_Close=1 "让当前不被编辑的文件的方法列表自动折叠起来 
		let Tlist_Use_Right_Window=1  "把taglist窗口放在屏幕的右侧，缺省在左侧 
		"autocmd vimenter * TlistToggle     "自动显示Taglist
	
	
		"""""""""""""""""""""""""""""""
		"linepower.vim   #need to put the monaco.ttf into ~/.fonts
		""""""""""""""""""""""""""""""
		"let g:Powerline_symbols = 'fancy' "Custom icons and arrows. Requires a patched font. 
	
		"vim-airline
		let g:airline_section_b = '%{strftime("%c")}'
		let g:airline_section_y = 'BN: %{bufnr("%")}'
		let g:airline#extensions#tabline#enabled = 1
		let g:airline#extensions#tabline#left_sep = ' '
		let g:airline#extensions#tabline#left_alt_sep = '|'
		if !exists('g:airline_symbols')
		let g:airline_symbols = {}
		endif
	
		" unicode symbols
		let g:airline_left_sep = '▶'
		let g:airline_right_sep = '◀'
		let g:airline_symbols.linenr = '¶'
		let g:airline_symbols.branch = '⎇'
		let g:airline_symbols.paste = '∥'
		let g:airline_symbols.whitespace = 'Ξ'
		let g:airline_theme= 'murmur'
		"
		"
		"
		"
		"
		"
	
		"新建.c,.h,.sh,.java文件，自动插入文件头 
		autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()" 
		"""定义函数SetTitle，自动插入文件头 
	
	func SetTitle() 
		"如果文件类型为.sh文件 
		if &filetype == 'sh'
		call setline(1,"\#########################################################################") 
		call append(line("."), "\# File Name: ".expand("%")) 
		call append(line(".")+1, "\# Author: SilverFrog") 
		call append(line(".")+2, "\# mail: tardis.fang@gmail.com") 
		call append(line(".")+3, "\# Created Time: ".strftime("%c")) 
		call append(line(".")+4, "\#########################################################################") 
		call append(line(".")+5, "\#!/bin/bash") 
		call append(line(".")+6, "") 
		else 
		call setline(1, "/*************************************************************************") 
		call append(line("."), "    > File Name: ".expand("%")) 
		call append(line(".")+1, "    > Author: SilverFrog") 
		call append(line(".")+2, "    > Mail: tardis.fang@gmail.com ") 
		call append(line(".")+3, "    > Created Time: ".strftime("%c")) 
		call append(line(".")+4, " ************************************************************************/") 
		call append(line(".")+5, "")
		endif
		if &filetype == 'cpp'
		call append(line(".")+6, "#include<iostream>")
		call append(line(".")+7, "using namespace std;")
		call append(line(".")+8, "")
		endif
		if &filetype == 'c'
		call append(line(".")+6, "#include<stdio.h>")
		call append(line(".")+7, "")
		endif
	
		"新建文件后，自动定位到文件末尾
		autocmd BufNewFile * normal G
	endfunc 
	
